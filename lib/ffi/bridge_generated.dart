// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class AkkaImSdkRust {
  Stream<int> hello({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHelloConstMeta;

  Future<Uint8List> lz4Encode({required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLz4EncodeConstMeta;

  Future<Uint8List> lz4Decode({required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLz4DecodeConstMeta;

  Future<Uint8List> teaEncode(
      {required Uint8List key, required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTeaEncodeConstMeta;

  Future<Uint8List> teaDecode(
      {required Uint8List key, required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTeaDecodeConstMeta;

  Future<KeyPar> genKeyPair({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenKeyPairConstMeta;

  Future<Uint8List> calculateShareKey(
      {required Uint8List private, required Uint8List public, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCalculateShareKeyConstMeta;
}

class KeyPar {
  final Uint8List private;
  final Uint8List public;

  KeyPar({
    required this.private,
    required this.public,
  });
}

class AkkaImSdkRustImpl extends FlutterRustBridgeBase<AkkaImSdkRustWire>
    implements AkkaImSdkRust {
  factory AkkaImSdkRustImpl(ffi.DynamicLibrary dylib) =>
      AkkaImSdkRustImpl.raw(AkkaImSdkRustWire(dylib));

  AkkaImSdkRustImpl.raw(AkkaImSdkRustWire inner) : super(inner);

  Stream<int> hello({dynamic hint}) => executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_hello(port_),
        parseSuccessData: _wire2api_i32,
        constMeta: kHelloConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHelloConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hello",
        argNames: [],
      );

  Future<Uint8List> lz4Encode({required Uint8List data, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_lz4_encode(port_, _api2wire_uint_8_list(data)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kLz4EncodeConstMeta,
        argValues: [data],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kLz4EncodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "lz4_encode",
        argNames: ["data"],
      );

  Future<Uint8List> lz4Decode({required Uint8List data, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_lz4_decode(port_, _api2wire_uint_8_list(data)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kLz4DecodeConstMeta,
        argValues: [data],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kLz4DecodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "lz4_decode",
        argNames: ["data"],
      );

  Future<Uint8List> teaEncode(
          {required Uint8List key, required Uint8List data, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_tea_encode(
            port_, _api2wire_uint_8_list(key), _api2wire_uint_8_list(data)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kTeaEncodeConstMeta,
        argValues: [key, data],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kTeaEncodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tea_encode",
        argNames: ["key", "data"],
      );

  Future<Uint8List> teaDecode(
          {required Uint8List key, required Uint8List data, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_tea_decode(
            port_, _api2wire_uint_8_list(key), _api2wire_uint_8_list(data)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kTeaDecodeConstMeta,
        argValues: [key, data],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kTeaDecodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tea_decode",
        argNames: ["key", "data"],
      );

  Future<KeyPar> genKeyPair({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_gen_key_pair(port_),
        parseSuccessData: _wire2api_key_par,
        constMeta: kGenKeyPairConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenKeyPairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "gen_key_pair",
        argNames: [],
      );

  Future<Uint8List> calculateShareKey(
          {required Uint8List private,
          required Uint8List public,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_calculate_share_key(port_,
            _api2wire_uint_8_list(private), _api2wire_uint_8_list(public)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kCalculateShareKeyConstMeta,
        argValues: [private, public],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCalculateShareKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "calculate_share_key",
        argNames: ["private", "public"],
      );

  // Section: api2wire
  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
int _wire2api_i32(dynamic raw) {
  return raw as int;
}

KeyPar _wire2api_key_par(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return KeyPar(
    private: _wire2api_uint_8_list(arr[0]),
    public: _wire2api_uint_8_list(arr[1]),
  );
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class AkkaImSdkRustWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AkkaImSdkRustWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AkkaImSdkRustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_hello(
    int port_,
  ) {
    return _wire_hello(
      port_,
    );
  }

  late final _wire_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_hello');
  late final _wire_hello = _wire_helloPtr.asFunction<void Function(int)>();

  void wire_lz4_encode(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_lz4_encode(
      port_,
      data,
    );
  }

  late final _wire_lz4_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_lz4_encode');
  late final _wire_lz4_encode = _wire_lz4_encodePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_lz4_decode(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_lz4_decode(
      port_,
      data,
    );
  }

  late final _wire_lz4_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_lz4_decode');
  late final _wire_lz4_decode = _wire_lz4_decodePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_tea_encode(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_tea_encode(
      port_,
      key,
      data,
    );
  }

  late final _wire_tea_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_tea_encode');
  late final _wire_tea_encode = _wire_tea_encodePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_tea_decode(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_tea_decode(
      port_,
      key,
      data,
    );
  }

  late final _wire_tea_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_tea_decode');
  late final _wire_tea_decode = _wire_tea_decodePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_gen_key_pair(
    int port_,
  ) {
    return _wire_gen_key_pair(
      port_,
    );
  }

  late final _wire_gen_key_pairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_gen_key_pair');
  late final _wire_gen_key_pair =
      _wire_gen_key_pairPtr.asFunction<void Function(int)>();

  void wire_calculate_share_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> private_,
    ffi.Pointer<wire_uint_8_list> public_,
  ) {
    return _wire_calculate_share_key(
      port_,
      private_,
      public_,
    );
  }

  late final _wire_calculate_share_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_calculate_share_key');
  late final _wire_calculate_share_key =
      _wire_calculate_share_keyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
